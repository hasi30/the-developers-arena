# -*- coding: utf-8 -*-
"""stock price prediction on time series data using lstm  developers arena month4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P1_1B0V2A2Ghds3xacIpYxjX3eIGDl7F
"""

# ðŸ“Œ Step 1: Import libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# ðŸ“Œ Step 2: Load and prepare data
df = pd.read_excel("yahoo_data.xlsx")  # Path to your dataset

# Clean and convert date
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date')
df.rename(columns={'Close*': 'Close', 'Adj Close**': 'Adj_Close'}, inplace=True)

# Use only closing prices
data = df[['Close']].values

# ðŸ“Œ Step 3: Normalize
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# ðŸ“Œ Step 4: Create sequences
sequence_length = 60
X, y = [], []

for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# ðŸ“Œ Step 5: Train-test split
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# ðŸ“Œ Step 6: Build LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

# ðŸ“Œ Step 7: Train the model
model.fit(X_train, y_train, epochs=20, batch_size=32)

# ðŸ“Œ Step 8: Predict and inverse transform
predicted_prices = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted_prices)
actual_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

# ðŸ“Œ Step 9: Visualize
plt.figure(figsize=(12, 6))
plt.plot(actual_prices, color='blue', label='Actual Closing Prices')
plt.plot(predicted_prices, color='red', label='Predicted Closing Prices')
plt.title('Stock Price Prediction using LSTM')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.grid(True)
plt.show()