# -*- coding: utf-8 -*-
"""CNN developers arena month 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iWoOMITOVc10kpzWwHZhEbiexxF__Z0u
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
import torch.optim as optim

from sklearn.model_selection import train_test_split
from sklearn. preprocessing import LabelEncoder

import matplotlib.pyplot as plt
import seaborn as sns

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

train = pd.read_csv('/content/fashion-mnist_train.csv')
test  = pd.read_csv('/content/fashion-mnist_test.csv')

labs = {0 : 'T-shirt/top', 1 : 'Trouser', 2 : 'Pullover', 3 : 'Dress',
4 : 'Coat', 5 : 'Sandal', 6 : 'Shirt', 7 : 'Sneaker',
8 : 'Bag', 9 : 'Ankle boot'}

def labs_fun(index):
    return labs[index]

label_names = list(map(labs_fun, train['label']))

train.head()

test.head()

train.shape, test.shape

fig, axes = plt.subplots(4, 4, figsize=(10, 10))
fig.suptitle("First 16 Images", fontsize=16)

for i, ax in enumerate(axes.flat):
    img = train.iloc[i, 1:].values.reshape(28, 28)  # Reshape to 28x28
    ax.imshow(img)  # Display in grayscale
    ax.axis('off')  # Remove axis for a cleaner look
    ax.set_title(f"Label: {label_names[i]}, : {train.iloc[i, 0]}");  # Show the label

plt.tight_layout(rect=[0, 0, 1, 0.96])  # Adjust layout to fit the title
plt.show()

X_train = train.drop('label', axis = 1)/255.0
y_train = train['label']
X_test = test.drop('label', axis = 1)/255.0
y_test = test['label']

X_train = torch.from_numpy(X_train.to_numpy().astype(np.float32))
y_train = torch.from_numpy(y_train.to_numpy().astype(np.int64))
X_test  = torch.from_numpy(X_test.to_numpy().astype(np.float32))
y_test  = torch.from_numpy(y_test.to_numpy().astype(np.int64))

class cdataset(Dataset):
    def __init__(self, X, y):
        self.X = X.reshape(-1,1,28,28)
        self.y = y
    def __len__(self):
        return len(self.X)
    def __getitem__(self, index):
        return self.X[index], self.y[index]

train_dataset = cdataset(X_train, y_train)
test_dataset = cdataset(X_test, y_test)

dl_train = DataLoader(train_dataset, batch_size=32, shuffle=True, pin_memory=True)
dl_test  = DataLoader( test_dataset, batch_size=32, shuffle=False, pin_memory=True)

class MyNN(nn.Module):
    def __init__(self, input_features):
        super().__init__()

        self.features = nn.Sequential(
            nn.Conv2d(input_features, 32, kernel_size=3, padding='same'),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.MaxPool2d(kernel_size=2, stride=2),

            nn.Conv2d(32, 64, kernel_size=3, padding='same'),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.MaxPool2d(kernel_size=2, stride=4)
        )
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(1024, 128), # 64*7*7
            nn.ReLU(),
            nn.Dropout(p=0.4),

            nn.Linear(128, 64),
            nn.ReLU(),
            nn.Dropout(p=0.4),

            nn.Linear(64, 10)
        )

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)

        return x

learning_rate = 0.01
epochs = 10

model = MyNN(1)
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=learning_rate, weight_decay=1e-4)

# Check for CUDA availability and set the device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

model = nn.DataParallel(model)
model.to(device)

for epoch in range(epochs):

  total_epoch_loss = 0

  for batch_features, batch_labels in dl_train:

    # move data to gpu
    batch_features, batch_labels = batch_features.to(device), batch_labels.to(device)

    # forward pass
    outputs = model(batch_features)

    # calculate loss
    loss = criterion(outputs, batch_labels)

    # back pass
    optimizer.zero_grad()
    loss.backward()

    # update grads
    optimizer.step()

    total_epoch_loss = total_epoch_loss + loss.item()

  avg_loss = total_epoch_loss/len(dl_train)
  print(f'Epoch: {epoch + 1} , Loss: {avg_loss}')

model.eval()

# evaluation on test data
total = 0
correct = 0

with torch.no_grad():

  for batch_features, batch_labels in dl_test:

    # move data to gpu
    batch_features, batch_labels = batch_features.to(device), batch_labels.to(device)

    outputs = model(batch_features)

    _, predicted = torch.max(outputs, 1)

    total = total + batch_labels.shape[0]

    correct = correct + (predicted == batch_labels).sum().item()

print(correct/total)

# evaluation on training data
total = 0
correct = 0

with torch.no_grad():

  for batch_features, batch_labels in dl_train:

    # move data to gpu
    batch_features, batch_labels = batch_features.to(device), batch_labels.to(device)

    outputs = model(batch_features)

    _, predicted = torch.max(outputs, 1)

    total = total + batch_labels.shape[0]

    correct = correct + (predicted == batch_labels).sum().item()

print(correct/total)