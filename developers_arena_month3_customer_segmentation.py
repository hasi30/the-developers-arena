# -*- coding: utf-8 -*-
"""developers arena month3 customer segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-vOCbNLFijC8lPfErv0euSErDBZhZNu-
"""

import pandas as pd

# Load the uploaded dataset
file_path = "Mall_Customers.csv"
df = pd.read_csv(file_path)

# Display the first few rows to understand its structure
df.head()

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Feature selection (excluding CustomerID and encoding Gender)
df_processed = df.drop("CustomerID", axis=1)
df_processed['Gender'] = df_processed['Gender'].map({'Male': 0, 'Female': 1})

# Step 2: Standardize the features
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_processed)

# Step 3: Apply PCA to reduce to 2 components
pca = PCA(n_components=2)
pca_data = pca.fit_transform(scaled_data)

# Step 4: Use the elbow method to determine the optimal number of clusters
inertia = []
k_range = range(1, 11)
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init='auto')
    kmeans.fit(pca_data)
    inertia.append(kmeans.inertia_)

# Plotting the elbow curve
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia, 'bo-')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method For Optimal k')
plt.grid(True)
plt.tight_layout()
plt.show()

# Re-run elbow method with corrected n_init
inertia = []
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(pca_data)
    inertia.append(kmeans.inertia_)

# Plotting the elbow curve
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia, 'bo-')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method For Optimal k')
plt.grid(True)
plt.tight_layout()
plt.show()

# Step 5: Apply K-Means with optimal number of clusters (k=5)
kmeans = KMeans(n_clusters=5, random_state=42, n_init=10)
cluster_labels = kmeans.fit_predict(pca_data)

# Add cluster labels to the DataFrame
df['Cluster'] = cluster_labels

# Step 6: Visualize clusters in PCA space
plt.figure(figsize=(8, 6))
sns.scatterplot(x=pca_data[:, 0], y=pca_data[:, 1], hue=cluster_labels, palette='Set2', s=80)
plt.title('Customer Segments by K-Means (PCA Reduced)')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.legend(title='Cluster')
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
# from joblib import load # This line is not needed and causes the error

# 1) Load the pipeline bundle - This step is not needed as the objects are already in memory
# bundle = load("/content/Mall_Customers.csv")
# scaler, pca, kmeans = bundle["scaler"], bundle["pca"], bundle["kmeans"]

# 2) New customer(s)
data = pd.DataFrame({
    "Gender": ["Female"],
    "Age": [25],
    "Annual Income (k$)": [10000],
    "Spending Score (1-100)": [99],
})
data["Gender"] = data["Gender"].map({"Male": 0, "Female": 1})

# 3) Apply the same transforms
X_scaled = scaler.transform(data)
X_pca    = pca.transform(X_scaled)

# 4) Predict segment
segment = kmeans.predict(X_pca)
print("Assigned cluster:", segment[0])